// Code generated by moshi-kotlin-codegen. Do not edit.
package com.tawabsoft.taxi.common.models

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.internal.Util
import java.lang.NullPointerException
import kotlin.Double
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.collections.emptySet
import kotlin.text.buildString

@Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION")
class TransactionJsonAdapter(
  moshi: Moshi
) : JsonAdapter<Transaction>() {
  private val options: JsonReader.Options = JsonReader.Options.of("amount", "currency",
      "documentNumber", "transactionTime", "details", "id", "transactionType")

  private val doubleAdapter: JsonAdapter<Double> = moshi.adapter(Double::class.java, emptySet(),
      "amount")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "currency")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "documentNumber")

  private val longAdapter: JsonAdapter<Long> = moshi.adapter(Long::class.java, emptySet(),
      "transactionTime")

  override fun toString(): String = buildString(33) {
      append("GeneratedJsonAdapter(").append("Transaction").append(')') }

  override fun fromJson(reader: JsonReader): Transaction {
    var amount: Double? = null
    var currency: String? = null
    var documentNumber: String? = null
    var transactionTime: Long? = null
    var details: String? = null
    var id: Long? = null
    var transactionType: String? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> amount = doubleAdapter.fromJson(reader) ?: throw Util.unexpectedNull("amount",
            "amount", reader)
        1 -> currency = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("currency",
            "currency", reader)
        2 -> documentNumber = nullableStringAdapter.fromJson(reader)
        3 -> transactionTime = longAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("transactionTime", "transactionTime", reader)
        4 -> details = nullableStringAdapter.fromJson(reader)
        5 -> id = longAdapter.fromJson(reader) ?: throw Util.unexpectedNull("id", "id", reader)
        6 -> transactionType = stringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("transactionType", "transactionType", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return Transaction(
        amount = amount ?: throw Util.missingProperty("amount", "amount", reader),
        currency = currency ?: throw Util.missingProperty("currency", "currency", reader),
        documentNumber = documentNumber,
        transactionTime = transactionTime ?: throw Util.missingProperty("transactionTime",
            "transactionTime", reader),
        details = details,
        id = id ?: throw Util.missingProperty("id", "id", reader),
        transactionType = transactionType ?: throw Util.missingProperty("transactionType",
            "transactionType", reader)
    )
  }

  override fun toJson(writer: JsonWriter, value: Transaction?) {
    if (value == null) {
      throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("amount")
    doubleAdapter.toJson(writer, value.amount)
    writer.name("currency")
    stringAdapter.toJson(writer, value.currency)
    writer.name("documentNumber")
    nullableStringAdapter.toJson(writer, value.documentNumber)
    writer.name("transactionTime")
    longAdapter.toJson(writer, value.transactionTime)
    writer.name("details")
    nullableStringAdapter.toJson(writer, value.details)
    writer.name("id")
    longAdapter.toJson(writer, value.id)
    writer.name("transactionType")
    stringAdapter.toJson(writer, value.transactionType)
    writer.endObject()
  }
}
