// Code generated by moshi-kotlin-codegen. Do not edit.
package com.tawabsoft.taxi.common.models

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.internal.Util
import java.lang.NullPointerException
import kotlin.Boolean
import kotlin.Double
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.collections.emptySet
import kotlin.text.buildString

@Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION")
class CouponJsonAdapter(
  moshi: Moshi
) : JsonAdapter<Coupon>() {
  private val options: JsonReader.Options = JsonReader.Options.of("code", "daysLeft", "description",
      "discountPercent", "expirationTimestamp", "flatDiscount", "id", "isEnabled",
      "isFirstTravelOnly", "manyTimesUserCanUse", "manyUsersCanUse", "startTimestamp", "title")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "code")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(), "daysLeft")

  private val longAdapter: JsonAdapter<Long> = moshi.adapter(Long::class.java, emptySet(),
      "expirationTimestamp")

  private val doubleAdapter: JsonAdapter<Double> = moshi.adapter(Double::class.java, emptySet(),
      "flatDiscount")

  private val booleanAdapter: JsonAdapter<Boolean> = moshi.adapter(Boolean::class.java, emptySet(),
      "isEnabled")

  override fun toString(): String = buildString(28) {
      append("GeneratedJsonAdapter(").append("Coupon").append(')') }

  override fun fromJson(reader: JsonReader): Coupon {
    var code: String? = null
    var codeSet: Boolean = false
    var daysLeft: Int? = null
    var description: String? = null
    var descriptionSet: Boolean = false
    var discountPercent: Int? = null
    var expirationTimestamp: Long? = null
    var flatDiscount: Double? = null
    var id: Int? = null
    var isEnabled: Boolean? = null
    var isFirstTravelOnly: Boolean? = null
    var manyTimesUserCanUse: Int? = null
    var manyUsersCanUse: Int? = null
    var startTimestamp: Long? = null
    var title: String? = null
    var titleSet: Boolean = false
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> {
          code = nullableStringAdapter.fromJson(reader)
          codeSet = true
        }
        1 -> daysLeft = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("daysLeft",
            "daysLeft", reader)
        2 -> {
          description = nullableStringAdapter.fromJson(reader)
          descriptionSet = true
        }
        3 -> discountPercent = intAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("discountPercent", "discountPercent", reader)
        4 -> expirationTimestamp = longAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("expirationTimestamp", "expirationTimestamp", reader)
        5 -> flatDiscount = doubleAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("flatDiscount", "flatDiscount", reader)
        6 -> id = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("id", "id", reader)
        7 -> isEnabled = booleanAdapter.fromJson(reader) ?: throw Util.unexpectedNull("isEnabled",
            "isEnabled", reader)
        8 -> isFirstTravelOnly = booleanAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("isFirstTravelOnly", "isFirstTravelOnly", reader)
        9 -> manyTimesUserCanUse = intAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("manyTimesUserCanUse", "manyTimesUserCanUse", reader)
        10 -> manyUsersCanUse = intAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("manyUsersCanUse", "manyUsersCanUse", reader)
        11 -> startTimestamp = longAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("startTimestamp", "startTimestamp", reader)
        12 -> {
          title = nullableStringAdapter.fromJson(reader)
          titleSet = true
        }
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    val result = Coupon(
    )
    result.code = if (codeSet) code else result.code
    result.daysLeft = daysLeft ?: result.daysLeft
    result.description = if (descriptionSet) description else result.description
    result.discountPercent = discountPercent ?: result.discountPercent
    result.expirationTimestamp = expirationTimestamp ?: result.expirationTimestamp
    result.flatDiscount = flatDiscount ?: result.flatDiscount
    result.id = id ?: result.id
    result.isEnabled = isEnabled ?: result.isEnabled
    result.isFirstTravelOnly = isFirstTravelOnly ?: result.isFirstTravelOnly
    result.manyTimesUserCanUse = manyTimesUserCanUse ?: result.manyTimesUserCanUse
    result.manyUsersCanUse = manyUsersCanUse ?: result.manyUsersCanUse
    result.startTimestamp = startTimestamp ?: result.startTimestamp
    result.title = if (titleSet) title else result.title
    return result
  }

  override fun toJson(writer: JsonWriter, value: Coupon?) {
    if (value == null) {
      throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("code")
    nullableStringAdapter.toJson(writer, value.code)
    writer.name("daysLeft")
    intAdapter.toJson(writer, value.daysLeft)
    writer.name("description")
    nullableStringAdapter.toJson(writer, value.description)
    writer.name("discountPercent")
    intAdapter.toJson(writer, value.discountPercent)
    writer.name("expirationTimestamp")
    longAdapter.toJson(writer, value.expirationTimestamp)
    writer.name("flatDiscount")
    doubleAdapter.toJson(writer, value.flatDiscount)
    writer.name("id")
    intAdapter.toJson(writer, value.id)
    writer.name("isEnabled")
    booleanAdapter.toJson(writer, value.isEnabled)
    writer.name("isFirstTravelOnly")
    booleanAdapter.toJson(writer, value.isFirstTravelOnly)
    writer.name("manyTimesUserCanUse")
    intAdapter.toJson(writer, value.manyTimesUserCanUse)
    writer.name("manyUsersCanUse")
    intAdapter.toJson(writer, value.manyUsersCanUse)
    writer.name("startTimestamp")
    longAdapter.toJson(writer, value.startTimestamp)
    writer.name("title")
    nullableStringAdapter.toJson(writer, value.title)
    writer.endObject()
  }
}
