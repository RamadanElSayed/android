// Code generated by moshi-kotlin-codegen. Do not edit.
package com.tawabsoft.taxi.common.models

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.internal.Util
import java.lang.NullPointerException
import java.lang.reflect.Constructor
import kotlin.Boolean
import kotlin.Double
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.collections.emptySet
import kotlin.jvm.Volatile
import kotlin.text.buildString

@Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION")
class ServiceJsonAdapter(
  moshi: Moshi
) : JsonAdapter<Service>() {
  private val options: JsonReader.Options = JsonReader.Options.of("serviceCategory", "media",
      "availableTimeFrom", "perHundredMeters", "availableTimeTo", "perMinuteDrive",
      "rangeMinusPercent", "rangePlusPercent", "baseFare", "id", "title", "perMinuteWait",
      "minimumFee", "cost", "canEnableVerificationCode", "distanceFeeMode", "feeEstimationMode",
      "paymentMethod", "paymentTime", "quantityMode", "bookingMode")

  private val nullableServiceCategoryAdapter: JsonAdapter<ServiceCategory?> =
      moshi.adapter(ServiceCategory::class.java, emptySet(), "serviceCategory")

  private val nullableMediaAdapter: JsonAdapter<Media?> = moshi.adapter(Media::class.java,
      emptySet(), "media")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "availableTimeFrom")

  private val doubleAdapter: JsonAdapter<Double> = moshi.adapter(Double::class.java, emptySet(),
      "perHundredMeters")

  private val nullableIntAdapter: JsonAdapter<Int?> = moshi.adapter(Int::class.javaObjectType,
      emptySet(), "rangeMinusPercent")

  private val longAdapter: JsonAdapter<Long> = moshi.adapter(Long::class.java, emptySet(), "id")

  private val nullableDoubleAdapter: JsonAdapter<Double?> =
      moshi.adapter(Double::class.javaObjectType, emptySet(), "minimumFee")

  private val booleanAdapter: JsonAdapter<Boolean> = moshi.adapter(Boolean::class.java, emptySet(),
      "canEnableVerificationCode")

  private val distanceFeeAdapter: JsonAdapter<Service.DistanceFee> =
      moshi.adapter(Service.DistanceFee::class.java, emptySet(), "distanceFeeMode")

  private val feeEstimationModeAdapter: JsonAdapter<Service.FeeEstimationMode> =
      moshi.adapter(Service.FeeEstimationMode::class.java, emptySet(), "feeEstimationMode")

  private val paymentMethodAdapter: JsonAdapter<Service.PaymentMethod> =
      moshi.adapter(Service.PaymentMethod::class.java, emptySet(), "paymentMethod")

  private val paymentTimeAdapter: JsonAdapter<Service.PaymentTime> =
      moshi.adapter(Service.PaymentTime::class.java, emptySet(), "paymentTime")

  private val quantityModeAdapter: JsonAdapter<Service.QuantityMode> =
      moshi.adapter(Service.QuantityMode::class.java, emptySet(), "quantityMode")

  private val bookingModeAdapter: JsonAdapter<Service.BookingMode> =
      moshi.adapter(Service.BookingMode::class.java, emptySet(), "bookingMode")

  @Volatile
  private var constructorRef: Constructor<Service>? = null

  override fun toString(): String = buildString(29) {
      append("GeneratedJsonAdapter(").append("Service").append(')') }

  override fun fromJson(reader: JsonReader): Service {
    var serviceCategory: ServiceCategory? = null
    var media: Media? = null
    var availableTimeFrom: String? = null
    var perHundredMeters: Double? = null
    var availableTimeTo: String? = null
    var perMinuteDrive: Double? = null
    var rangeMinusPercent: Int? = null
    var rangePlusPercent: Int? = null
    var baseFare: Double? = null
    var id: Long? = 0L
    var title: String? = null
    var perMinuteWait: Double? = null
    var minimumFee: Double? = null
    var cost: Double? = null
    var canEnableVerificationCode: Boolean? = null
    var distanceFeeMode: Service.DistanceFee? = null
    var feeEstimationMode: Service.FeeEstimationMode? = null
    var paymentMethod: Service.PaymentMethod? = null
    var paymentTime: Service.PaymentTime? = null
    var quantityMode: Service.QuantityMode? = null
    var bookingMode: Service.BookingMode? = null
    var mask0 = -1
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> serviceCategory = nullableServiceCategoryAdapter.fromJson(reader)
        1 -> media = nullableMediaAdapter.fromJson(reader)
        2 -> availableTimeFrom = nullableStringAdapter.fromJson(reader)
        3 -> perHundredMeters = doubleAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("perHundredMeters", "perHundredMeters", reader)
        4 -> availableTimeTo = nullableStringAdapter.fromJson(reader)
        5 -> perMinuteDrive = doubleAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("perMinuteDrive", "perMinuteDrive", reader)
        6 -> rangeMinusPercent = nullableIntAdapter.fromJson(reader)
        7 -> rangePlusPercent = nullableIntAdapter.fromJson(reader)
        8 -> baseFare = doubleAdapter.fromJson(reader) ?: throw Util.unexpectedNull("baseFare",
            "baseFare", reader)
        9 -> {
          id = longAdapter.fromJson(reader) ?: throw Util.unexpectedNull("id", "id", reader)
          // $mask = $mask and (1 shl 9).inv()
          mask0 = mask0 and 0xfffffdff.toInt()
        }
        10 -> title = nullableStringAdapter.fromJson(reader)
        11 -> perMinuteWait = doubleAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("perMinuteWait", "perMinuteWait", reader)
        12 -> minimumFee = nullableDoubleAdapter.fromJson(reader)
        13 -> cost = nullableDoubleAdapter.fromJson(reader)
        14 -> canEnableVerificationCode = booleanAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("canEnableVerificationCode", "canEnableVerificationCode",
            reader)
        15 -> distanceFeeMode = distanceFeeAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("distanceFeeMode", "distanceFeeMode", reader)
        16 -> feeEstimationMode = feeEstimationModeAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("feeEstimationMode", "feeEstimationMode", reader)
        17 -> paymentMethod = paymentMethodAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("paymentMethod", "paymentMethod", reader)
        18 -> paymentTime = paymentTimeAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("paymentTime", "paymentTime", reader)
        19 -> quantityMode = quantityModeAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("quantityMode", "quantityMode", reader)
        20 -> bookingMode = bookingModeAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("bookingMode", "bookingMode", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    @Suppress("UNCHECKED_CAST")
    val localConstructor: Constructor<Service> = this.constructorRef ?:
        Service::class.java.getDeclaredConstructor(ServiceCategory::class.java, Media::class.java,
        String::class.java, Double::class.javaPrimitiveType, String::class.java,
        Double::class.javaPrimitiveType, Int::class.javaObjectType, Int::class.javaObjectType,
        Double::class.javaPrimitiveType, Long::class.javaPrimitiveType, String::class.java,
        Double::class.javaPrimitiveType, Double::class.javaObjectType, Double::class.javaObjectType,
        Boolean::class.javaPrimitiveType, Service.DistanceFee::class.java,
        Service.FeeEstimationMode::class.java, Service.PaymentMethod::class.java,
        Service.PaymentTime::class.java, Service.QuantityMode::class.java,
        Service.BookingMode::class.java, Int::class.javaPrimitiveType,
        Util.DEFAULT_CONSTRUCTOR_MARKER).also { this.constructorRef = it }
    return localConstructor.newInstance(
        serviceCategory,
        media,
        availableTimeFrom,
        perHundredMeters ?: throw Util.missingProperty("perHundredMeters", "perHundredMeters",
            reader),
        availableTimeTo,
        perMinuteDrive ?: throw Util.missingProperty("perMinuteDrive", "perMinuteDrive", reader),
        rangeMinusPercent,
        rangePlusPercent,
        baseFare ?: throw Util.missingProperty("baseFare", "baseFare", reader),
        id,
        title,
        perMinuteWait ?: throw Util.missingProperty("perMinuteWait", "perMinuteWait", reader),
        minimumFee,
        cost,
        canEnableVerificationCode ?: throw Util.missingProperty("canEnableVerificationCode",
            "canEnableVerificationCode", reader),
        distanceFeeMode ?: throw Util.missingProperty("distanceFeeMode", "distanceFeeMode", reader),
        feeEstimationMode ?: throw Util.missingProperty("feeEstimationMode", "feeEstimationMode",
            reader),
        paymentMethod ?: throw Util.missingProperty("paymentMethod", "paymentMethod", reader),
        paymentTime ?: throw Util.missingProperty("paymentTime", "paymentTime", reader),
        quantityMode ?: throw Util.missingProperty("quantityMode", "quantityMode", reader),
        bookingMode ?: throw Util.missingProperty("bookingMode", "bookingMode", reader),
        mask0,
        null
    )
  }

  override fun toJson(writer: JsonWriter, value: Service?) {
    if (value == null) {
      throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("serviceCategory")
    nullableServiceCategoryAdapter.toJson(writer, value.serviceCategory)
    writer.name("media")
    nullableMediaAdapter.toJson(writer, value.media)
    writer.name("availableTimeFrom")
    nullableStringAdapter.toJson(writer, value.availableTimeFrom)
    writer.name("perHundredMeters")
    doubleAdapter.toJson(writer, value.perHundredMeters)
    writer.name("availableTimeTo")
    nullableStringAdapter.toJson(writer, value.availableTimeTo)
    writer.name("perMinuteDrive")
    doubleAdapter.toJson(writer, value.perMinuteDrive)
    writer.name("rangeMinusPercent")
    nullableIntAdapter.toJson(writer, value.rangeMinusPercent)
    writer.name("rangePlusPercent")
    nullableIntAdapter.toJson(writer, value.rangePlusPercent)
    writer.name("baseFare")
    doubleAdapter.toJson(writer, value.baseFare)
    writer.name("id")
    longAdapter.toJson(writer, value.id)
    writer.name("title")
    nullableStringAdapter.toJson(writer, value.title)
    writer.name("perMinuteWait")
    doubleAdapter.toJson(writer, value.perMinuteWait)
    writer.name("minimumFee")
    nullableDoubleAdapter.toJson(writer, value.minimumFee)
    writer.name("cost")
    nullableDoubleAdapter.toJson(writer, value.cost)
    writer.name("canEnableVerificationCode")
    booleanAdapter.toJson(writer, value.canEnableVerificationCode)
    writer.name("distanceFeeMode")
    distanceFeeAdapter.toJson(writer, value.distanceFeeMode)
    writer.name("feeEstimationMode")
    feeEstimationModeAdapter.toJson(writer, value.feeEstimationMode)
    writer.name("paymentMethod")
    paymentMethodAdapter.toJson(writer, value.paymentMethod)
    writer.name("paymentTime")
    paymentTimeAdapter.toJson(writer, value.paymentTime)
    writer.name("quantityMode")
    quantityModeAdapter.toJson(writer, value.quantityMode)
    writer.name("bookingMode")
    bookingModeAdapter.toJson(writer, value.bookingMode)
    writer.endObject()
  }
}
