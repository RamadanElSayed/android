// Code generated by moshi-kotlin-codegen. Do not edit.
package com.tawabsoft.taxi.common.models

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.internal.Util
import java.lang.NullPointerException
import java.lang.reflect.Constructor
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.collections.emptySet
import kotlin.jvm.Volatile
import kotlin.text.buildString

@Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION")
class ChatMessageJsonAdapter(
  moshi: Moshi
) : JsonAdapter<ChatMessage>() {
  private val options: JsonReader.Options = JsonReader.Options.of("id", "sentBy", "sentAt", "state",
      "request", "content")

  private val longAdapter: JsonAdapter<Long> = moshi.adapter(Long::class.java, emptySet(), "id")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "sentBy")

  private val nullableLongAdapter: JsonAdapter<Long?> = moshi.adapter(Long::class.javaObjectType,
      emptySet(), "sentAt")

  private val nullableRequestAdapter: JsonAdapter<Request?> = moshi.adapter(Request::class.java,
      emptySet(), "request")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "content")

  @Volatile
  private var constructorRef: Constructor<ChatMessage>? = null

  override fun toString(): String = buildString(33) {
      append("GeneratedJsonAdapter(").append("ChatMessage").append(')') }

  override fun fromJson(reader: JsonReader): ChatMessage {
    var id: Long? = 0L
    var sentBy: String? = null
    var sentAt: Long? = null
    var state: String? = null
    var request: Request? = null
    var content: String? = null
    var mask0 = -1
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> {
          id = longAdapter.fromJson(reader) ?: throw Util.unexpectedNull("id", "id", reader)
          // $mask = $mask and (1 shl 0).inv()
          mask0 = mask0 and 0xfffffffe.toInt()
        }
        1 -> {
          sentBy = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 1).inv()
          mask0 = mask0 and 0xfffffffd.toInt()
        }
        2 -> {
          sentAt = nullableLongAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 2).inv()
          mask0 = mask0 and 0xfffffffb.toInt()
        }
        3 -> {
          state = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 3).inv()
          mask0 = mask0 and 0xfffffff7.toInt()
        }
        4 -> {
          request = nullableRequestAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 4).inv()
          mask0 = mask0 and 0xffffffef.toInt()
        }
        5 -> content = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("content",
            "content", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    @Suppress("UNCHECKED_CAST")
    val localConstructor: Constructor<ChatMessage> = this.constructorRef ?:
        ChatMessage::class.java.getDeclaredConstructor(Long::class.javaPrimitiveType,
        String::class.java, Long::class.javaObjectType, String::class.java, Request::class.java,
        String::class.java, Int::class.javaPrimitiveType, Util.DEFAULT_CONSTRUCTOR_MARKER).also {
        this.constructorRef = it }
    return localConstructor.newInstance(
        id,
        sentBy,
        sentAt,
        state,
        request,
        content ?: throw Util.missingProperty("content", "content", reader),
        mask0,
        null
    )
  }

  override fun toJson(writer: JsonWriter, value: ChatMessage?) {
    if (value == null) {
      throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("id")
    longAdapter.toJson(writer, value.id)
    writer.name("sentBy")
    nullableStringAdapter.toJson(writer, value.sentBy)
    writer.name("sentAt")
    nullableLongAdapter.toJson(writer, value.sentAt)
    writer.name("state")
    nullableStringAdapter.toJson(writer, value.state)
    writer.name("request")
    nullableRequestAdapter.toJson(writer, value.request)
    writer.name("content")
    stringAdapter.toJson(writer, value.content)
    writer.endObject()
  }
}
